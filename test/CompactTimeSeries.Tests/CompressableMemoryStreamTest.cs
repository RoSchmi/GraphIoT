using Xunit;

namespace PhilipDaubmeier.CompactTimeSeries.Tests
{
    public class CompressableMemoryStreamTest
    {
        [Fact]
        public void TestCapacity()
        {
            using (var stream = new CompressableMemoryStream(100))
            {
                Assert.Equal(100, stream.Capacity);
            }
        }

        [Theory]
        [InlineData(new byte[] { })]
        [InlineData(new byte[] { 0x00, 0x00 })]
        [InlineData(new byte[] { 0x00, 0x01, 0x20, 0x35 })]
        [InlineData(new byte[] { 0x10, 0x00, 0x00, 0x01 })]
        [InlineData(new byte[] { 0xcf, 0x60, 0xde, 0xc6, 0x5d, 0x75, 0x14, 0x06, 0x1f, 0xb9, 0x30, 0x36, 0xf6, 0xcd, 0xd3,
            0x59, 0x3e, 0x0b, 0xda, 0x1b, 0x0d, 0x70, 0xb2, 0x11, 0x7b, 0x48, 0x82, 0xbc, 0xbb, 0x28, 0xcb, 0xfc, 0xed, 0x3a,
            0x49, 0xfa, 0x60, 0xc9, 0x96, 0x88, 0x81, 0x27, 0xab, 0xc2, 0x38, 0x53, 0xf4, 0xa7, 0x10, 0x63, 0x8d, 0xc4, 0xc5,
            0x25, 0x61, 0x13, 0xf1, 0x75, 0x59, 0x5b, 0x89, 0xcf, 0xc0, 0x62, 0x56, 0xaf, 0xc3, 0x64, 0x62, 0x3c, 0xd0, 0x9e,
            0xd9, 0x39, 0xee, 0xb3, 0x22, 0xa2, 0xcb, 0x3c, 0x81, 0x89, 0x7a, 0xe3, 0x80, 0xa2, 0xe7, 0x0b, 0xc5, 0xa1, 0x7a,
            0x61, 0xf1, 0xe2, 0x15, 0xf1, 0xed, 0x56, 0xd6, 0xd5, 0x45, 0x88, 0xc0, 0x81, 0x1c, 0x26, 0xf1, 0xb5, 0xd8, 0x4f,
            0xe5, 0x8c, 0x26, 0xcf, 0x38, 0x07, 0x78, 0xe8, 0xc9, 0x28, 0xc9, 0x08, 0x7d, 0xa2, 0xd5, 0x3b, 0xd8, 0x2a, 0x3b,
            0xb1, 0xa5, 0x00, 0x87, 0xca, 0xae, 0x36, 0x8a, 0x40, 0x3a, 0x5f, 0x33, 0x7b, 0x26, 0xe3, 0xe6, 0x90, 0x75, 0x33,
            0xb5, 0xe3, 0xd2, 0xab, 0xe0, 0xf7, 0x73, 0x30, 0xe7, 0xa1, 0x92, 0x0c, 0x90, 0x17, 0x52, 0x5f, 0x13, 0x16, 0xfa,
            0x9b, 0x0e, 0x07, 0x0d, 0xde, 0xb7, 0x11, 0xdb, 0xcc, 0xae, 0xf3, 0x4b, 0xdb, 0x7d, 0x80, 0xcd, 0x2a, 0xbe, 0x9f,
            0x2d, 0x5b, 0x53, 0x65, 0x91, 0x9b, 0x01, 0xfd, 0xc4, 0x8e, 0xab, 0x1f, 0xdc, 0xbf, 0x17, 0x16, 0xcd, 0xf4, 0xe3,
            0x51, 0x92, 0xf1, 0x32, 0xdf, 0xfe, 0x6e, 0xbc, 0x44, 0xd0, 0x47, 0x34, 0x60, 0xbf, 0x79, 0x97, 0x51, 0x70, 0x06,
            0x09, 0x59, 0xa6, 0x2a, 0xd9, 0x72, 0x71, 0x4e, 0xeb, 0x0d, 0x87, 0x25, 0xf0, 0xb8, 0x3b, 0x88, 0x44, 0x6a, 0xc9,
            0xa8, 0xe0, 0x6d, 0x7f, 0xeb, 0x2c, 0x7c, 0x57, 0x9a, 0x79, 0x12, 0x4d, 0x11, 0x47, 0x2d, 0x43, 0x12, 0x89, 0x82,
            0xef, 0x9d, 0x8b, 0x1e, 0x42, 0x5d, 0xc5, 0x94, 0x55, 0x0d, 0x6c, 0x95, 0x5e, 0xdb, 0x53, 0x73, 0xf3, 0x38, 0x58,
            0x32, 0x50, 0xea, 0x7d, 0x6b, 0x9e, 0x7b, 0x22, 0xfb, 0x2e, 0x9c, 0x38, 0x8e, 0x70, 0x9a, 0x7b, 0xaf, 0x21, 0x2e })]
        public void TestCompression(byte[] original)
        {
            byte[] compressed;
            using (var stream = new CompressableMemoryStream(original.Length))
            {
                stream.Write(original);
                compressed = stream.ToCompressedByteArray();
            }

            byte[] decompressed;
            using (var stream = CompressableMemoryStream.FromCompressedByteArray(compressed))
                decompressed = stream.ToArray();

            Assert.Equal(original, decompressed);
            Assert.InRange(compressed.Length == 0 ? 0 : decompressed.Length / (double)compressed.Length, 0, 0.95d);
        }
    }
}